// Copyright (C) 2016 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
apply plugin: 'com.android.library'
apply from: '../constants.gradle'

android {
    signingConfigs {
        release {
            keyAlias 'idea'
            keyPassword 'lyx19951'
            storeFile file('D:/project/IdeaAnimate/idea.jks')
            storePassword 'lyx19951'
        }
    }
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion
    defaultConfig {
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        consumerProguardFiles 'proguard-rules.txt'
        versionCode project.ext.versionCode
        versionName project.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
//            buildConfigField "boolean", "LOG_DEBUG", "false"
//            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    sourceSets {
        main {
            res.srcDirs = ['src/main/res', 'src/main/res/']
            jniLibs.srcDirs = ['libs']
        }
        debug { assets.srcDirs = ['src/debug/assets', 'src/debug/assets/'] }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation 'com.android.support:support-annotations:' + supportLibraryVersion
    implementation 'com.android.support:support-media-compat:' + supportLibraryVersion
    compileOnly 'org.checkerframework:checker-qual:' + checkerframeworkVersion
    compileOnly 'com.google.android.gms:play-services-ads:' + playServicesLibraryVersion
    //    compileOnly 'net.butterflytv.utils:rtmp-client:3.0.1'
    testImplementation 'junit:junit:' + junitVersion
    androidTestImplementation 'com.android.support.test:runner:0.5'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    implementation project(':exoLib')
}

configurations.all {
    resolutionStrategy {
        force 'com.android.support:support-annotations:' + supportLibraryVersion
    }
}

afterEvaluate {
    assembleDebug.doLast {
        rename('-debug')
        delete(aarPath() + getLibName() + '-debug' + AARsuffix())
    }
    assembleRelease.doLast {
        rename('-release')
        delete(aarPath() + getLibName() + '-release' + AARsuffix())
    }
}

def rename(String buildType) {
    copy {
        from(aarPath() + getName() + buildType + AARsuffix())
        into(outputsPath()) rename {
            getName() + '_dev_' + project.ext.versionName + getDate() + buildType + AARsuffix()
        }
    }
    copy {
        from('build/intermediates/bundles/' + buildType.substring(1) + '/classes.jar')
        into(outputsPath()) rename {
            getName() + '_dev_' + project.ext.versionName + getDate() + buildType + '.jar'
        }
    }
}

static def aarPath() {
    return 'build/outputs/aar/'
}

static def outputsPath() {
    return 'build/outputs/'
}

static def AARsuffix() {
    return '.aar'
}

def getLibName() {
    return getName()
}

static def getDate() {
    return new Date().format("-yyyyMMddhhmmss")
}